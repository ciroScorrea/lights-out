{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","evt","flipCellsAroundMe","value","classes","isLit","react_default","a","createElement","className","onClick","Component","Board","state","hasWon","board","createBoard","flipCellsAround","i","nRows","lines","j","nCols","push","Math","random","chanceLightStartsOn","flat","filter","v","length","coord","_this$props","_coord$split$map","split","map","Number","_coord$split$map2","slicedToArray","y","x","flipCell","includes","setState","_this2","style","display","l","key","c","src_Cell_0","toString","defaultProps","App","src_Board_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qTAqCeA,qBAnBb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,YAAcP,EAAKO,YAAYC,KAAjBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAFFA,2EAKPU,GAEVP,KAAKJ,MAAMY,kBAAkBR,KAAKJ,MAAMa,wCAIxC,IAAIC,EAAU,QAAUV,KAAKJ,MAAMe,MAAQ,YAAc,IACzD,OACIC,EAAAC,EAAAC,cAAA,MAAIC,UAAWL,EAASM,QAAShB,KAAKI,qBAd3Ba,cCcbC,qBAMJ,SAAAA,EAAYtB,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAkB,IACjBrB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAoB,GAAAf,KAAAH,KAAMJ,KACDuB,MAAQ,CAACC,QAAQ,EAAOC,MAAOxB,EAAKyB,eACzCzB,EAAK0B,gBAAkB1B,EAAK0B,gBAAgBlB,KAArBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAHNA,6EAWjB,IADA,IAAIwB,EAAQ,GACJG,EAAI,EAAIA,EAAIxB,KAAKJ,MAAM6B,MAAOD,IAAI,CAExC,IADA,IAAIE,EAAQ,GACJC,EAAI,EAAGA,EAAI3B,KAAKJ,MAAMgC,MAAOD,IACnCD,EAAMG,KAAKC,KAAKC,SAAW/B,KAAKJ,MAAMoC,qBAExCX,EAAMQ,KAAKH,GAOb,OALmBL,EAAMY,OAAOC,OAAO,SAAAC,GAAC,OAAgB,IAAZA,EAAE1B,QAC/B2B,SAAWpC,KAAKJ,MAAMgC,MAAQ5B,KAAKJ,MAAM6B,OACxDzB,KAAKsB,cAGED,0CAKOgB,GAAO,IAAAC,EACAtC,KAAKJ,MAArBgC,EADgBU,EAChBV,MAAOH,EADSa,EACTb,MACRJ,EAAQrB,KAAKmB,MAAME,MACnBD,EAASpB,KAAKmB,MAAMC,OAHHmB,EAIRF,EAAMG,MAAM,KAAKC,IAAIC,QAJbC,EAAA7C,OAAA8C,EAAA,EAAA9C,CAAAyC,EAAA,GAIhBM,EAJgBF,EAAA,GAIbG,EAJaH,EAAA,GAOrB,SAASI,EAASF,EAAGC,GAEfA,GAAK,GAAKA,EAAIlB,GAASiB,GAAK,GAAKA,EAAIpB,IACvCJ,EAAMwB,GAAGC,IAAMzB,EAAMwB,GAAGC,IAK5BC,EAASF,EAAGC,GACZC,EAASF,EAAE,EAAGC,GACdC,EAASF,EAAE,EAAGC,GACdC,EAASF,EAAGC,EAAE,GACdC,EAASF,EAAGC,EAAE,GAId1B,GAAWC,EAAMY,OAAOe,UAAS,GACjChD,KAAKiD,SAAS,CAAC5B,QAAOD,4CAOf,IAAA8B,EAAAlD,KAKP,OACEY,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIqC,MAAOnD,KAAKmB,MAAMC,OACpB,CAACgC,QAAQ,gBACT,CAACA,QAAQ,SAFX,gCAGExC,EAAAC,EAAAC,cAAA,OAAKqC,MAAOnD,KAAKmB,MAAMC,OACrB,CAACgC,QAAQ,QACT,CAACA,QAAQ,iBACTxC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,UACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAf,OACAH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,SACbH,EAAAC,EAAAC,cAAA,aACKd,KAAKmB,MAAME,MAAMoB,IAAI,SAACK,EAAIO,GAAL,OACpBzC,EAAAC,EAAAC,cAAA,MAAIwC,IAAKD,GAEPP,EAAEL,IAAI,SAACI,EAAIU,GAAL,OACJ3C,EAAAC,EAAAC,cAAC0C,EAAD,CACEF,IAAKD,EAAEI,WAAW,IAAIF,EAAEE,WACxBhD,MAAO4C,EAAEI,WAAW,IAAIF,EAAEE,WAC1B9C,QAAOkC,EACPrC,kBAAqB0C,EAAK3B,kCA1FlCN,cAAdC,EACGwC,aAAe,CACpBjC,MAAO,EACPG,MAAO,EACPI,oBAAqB,IAqGVd,QCxHAyC,0LARX,OACE/C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC8C,EAAD,cAJU3C,cCME4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.cee2278f.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport \"./Cell.css\"\n\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(evt) {\n    // call up to the board to flip cells around this cell\n    this.props.flipCellsAroundMe(this.props.value);\n  }\n\n  render() {\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");    \n    return (\n        <td className={classes} onClick={this.handleClick} />\n    )\n  }\n}\n\n\nexport default Cell","import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    nRows: 5,\n    nCols: 5,\n    chanceLightStartsOn: 0.5\n  }\n  constructor(props) {\n    super(props);\n    this.state = {hasWon: false, board: this.createBoard()}\n    this.flipCellsAround = this.flipCellsAround.bind(this);\n    // TODO: set initial state\n\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = []\n    for(let i = 0 ; i < this.props.nRows; i++){\n      let lines = []\n      for(let j = 0; j < this.props.nCols; j++){\n        lines.push(Math.random() > this.props.chanceLightStartsOn ? true : false) ; \n      }\n      board.push(lines);\n    }\n    const boardCheck = board.flat().filter(v => v.value === false);\n    if (boardCheck.length === this.props.nCols * this.props.nRows)\n    this.createBoard();\n    \n    // TODO: create array-of-arrays of true/false values \n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let {nCols, nRows} = this.props;\n    let board = this.state.board;\n    let hasWon = this.state.hasWon;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n      if (x >= 0 && x < nCols && y >= 0 && y < nRows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n    flipCell(y, x);\n    flipCell(y+1, x);\n    flipCell(y-1, x);\n    flipCell(y, x+1);\n    flipCell(y, x-1);\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    hasWon = !(board.flat().includes(true))\n    this.setState({board, hasWon})    \n  \n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n    // if the game is won, just show a winning msg & render nothing else\n    // TODO\n    // make table board\n\n    return(\n      <div>\n        <h1 style={this.state.hasWon ? \n          {display:'inline-block'} : \n          {display:'none'}}>You Won!!!!!!!!!!!!!!!!!!!!!</h1>\n          <div style={this.state.hasWon ? \n            {display:'none'} : \n            {display:'inline-block'}}>\n            <div className=\"neon-orange\">Lights</div>\n            <div className=\"neon-blue\">Out</div>\n            <table className=\"Board\">\n                <tbody>\n                    {this.state.board.map((x , l) =>\n                      <tr key={l} >\n                      {\n                        x.map((y , c) => \n                          <Cell\n                            key={l.toString()+'-'+c.toString()}\n                            value={l.toString()+'-'+c.toString()}\n                            isLit={y ? true : false }\n                            flipCellsAroundMe = {this.flipCellsAround}\n                          />\n                          )  \n                      }\n                      </tr>\n                      )}\n                </tbody>\n              </table>\n          </div>\n      </div>\n    )\n  }\n}\n\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}